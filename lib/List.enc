# List operations
def isIn(x: T, ys: List<T>) -> Bool where T: Eq
    for y in ys
        if x == y
            return True

    return False


def splitList(xs: List<T>, pivot: T) -> Pair<List<T>, List<T>> where T: PartialOrd
    lhs := Nil
    rhs := Nil

    for x in xs
        if x < pivot
            lhs = lhs.insert(x)
        else
            rhs = rhs.insert(x)

    return Pair(lhs, rhs)


def sort(xs: List<T>) -> List<T> where T: PartialOrd
    if xs.length() <= 1
        return xs

    pivot := xs.head()
    let Pair(lhs, rhs) := splitList(xs.tail(), pivot)

    return sort(lhs) + [pivot] + sort(rhs)


def uniquify(xs: List<T>) -> List<T> where T: Ord
    if xs.empty()
        return Nil

    xs = sort(xs)

    result := [xs.head()]
    last := xs.head()

    for x in xs.tail()
        match last.cmp(x)
            Equal
                pass
            Else
                result = result.insert(x)

        last = x

    return result
