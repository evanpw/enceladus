def isSpace(c: Char) -> Bool
    if c == ' ' or c == '\n' or c == '\r' or c == '\t'
        return True
    else
        return False

impl String
    def trimLeft(s: String) -> String
        len := s.length()

        n := 0
        while n < len and isSpace(s.at(n))
            n += 1

        return s.slice(n, len - n)

    def trim(s: String) -> String
        len := s.length()

        if len == 0
            return s

        n1 := 0
        while n1 < len and isSpace(s.at(n1))
            n1 += 1

        n2 := len - 1
        while n2 >= 0 and isSpace(s.at(n2))
            n2 -= 1

        pos := 1
        n := max(0, n2 - n1 + 1)

        return s.slice(pos, n)

    def trimChar(s: String, c: Char) -> String
        len := s.length()

        if len == 0
            return s

        n1 := 0
        while n1 < len and s.at(n1) == c
            n1 += 1

        n2 := len - 1
        while n2 >= 0 and s.at(n2) == c
            n2 -= 1

        pos := 1
        n := max(0, n2 - n1 + 1)

        return s.slice(pos, n)

    def split(s: String) -> [String]
        result := []
        start := 0

        len := s.length()
        for i = 0 to len - 1
            if isSpace(s.at(i))
                len := i - start
                result = s.slice(start, len) :: result
                start = i + 1

        if start < len
            result = s.slice(start, len - start) :: result

        return result.reverse()

    def splitBy(s: String, sep: Char) -> [String]
        result := []
        start := 0

        len := s.length()
        for i = 0 to len - 1
            if s.at(i) == sep
                len := i - start
                result = s.slice(start, len) :: result
                start = i + 1

        if start < len
            result = s.slice(start, len - start) :: result

        return result.reverse()

    def join(s: String, xs: [String]) -> String
        if xs.empty()
            return ""
        elif xs.length() == 1
            return xs.head()
        else
            return xs.head() ++ s ++ s.join(xs.tail())

    def toInt(s: String) -> Option<Int>
        x := 0
        for i = 0 to s.length() - 1
            digit := s.at(i)

            if digit < '0' or digit > '9'
                return None

            x *= 10
            x += (digit - '0')

        return Some(x)
