# List operations
def isIn(x: T, ys: [T]) -> Bool where T: Eq
    for y in ys.iter()
        if x == y
            return True

    return False


def splitList(xs: [T], pivot: T) -> Pair<[T], [T]> where T: PartialOrd
    lhs := []
    rhs := []

    for x in xs.iter()
        if x < pivot
            lhs = lhs.insert(x)
        else
            rhs = rhs.insert(x)

    return Pair(lhs, rhs)


def sort(xs: [T]) -> [T] where T: PartialOrd
    if xs.length() <= 1
        return xs

    pivot := xs.head()
    let Pair(lhs, rhs) := splitList(xs.tail(), pivot)

    return sort(lhs) + [pivot] + sort(rhs)


# Needs sub-traits to work correctly, so that Ord => PartialOrd and we can
# call sort
def uniquify(xs: [T]) -> [T] where T: Ord
    if xs.empty()
        return []

    xs = sort(xs)

    result := [xs.head()]
    last := xs.head()

    for x in xs.tail().iter()
        match last.cmp(x)
            Equal
                pass
            Else
                result = result.insert(x)

        last = x

    return result
