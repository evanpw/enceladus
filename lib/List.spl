# List operations
def isIn<T: Eq>(x: T, ys: [T]) -> Bool
    for y in ys
        if x.eq(y)
            return True

    return False


def splitList<T: Ord>(xs: [T], pivot: T) -> Pair<[T], [T]>
    lhs := []
    rhs := []

    for x in xs
        match x.cmp(pivot)
            Less
                lhs = x :: lhs
            Greater
                rhs = x :: rhs
            Equal
                rhs = x :: rhs

    return Pair(lhs, rhs)


def sort<T: Ord>(xs: [T]) -> [T]
    if xs.length() <= 1
        return xs

    pivot := xs.head()
    let Pair(lhs, rhs) := splitList(xs.tail(), pivot)

    return sort(lhs) ++ [pivot] ++ sort(rhs)


def uniquify<T: Ord>(xs: [T]) -> [T]
    if xs.empty()
        return []

    xs = sort(xs)

    result := [xs.head()]
    last := xs.head()

    for x in xs.tail()
        match last.cmp(x)
            Equal
                pass
            Less
                result = x :: result
            Greater
                result = x :: result

        last = x

    return result
