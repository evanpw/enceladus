---- Declarations for built-in functions written in C

-- String functions
type Char = Int
type String = [Char]

-- I/O functions
foreign read :: Int
foreign readLine :: String
foreign print :: String -> Unit
foreign dieWithMessage :: String -> Unit


---- Native-language standard library

-- concat :: [a] -> [a] -> [a]
def concat xs ys =
    if null xs then
        return ys
    else
        return head xs : concat (tail xs) ys


def assert b :: Bool -> Unit =
    if not b then dieWithMessage "Assertion failed!"


def assertMessage b err :: Bool -> String -> Unit =
    if not b then dieWithMessage $ "Assertion failed: " ++ err


-- Miscellanous functions
def range a b :: Int -> Int -> [Int] =
    xs := []

    i := b
    while i >= a do
        xs = i : xs
        i -= 1

    return xs


-- length :: [a] -> Int
def length xs =
    result := 0

    while not $ null xs do
        xs = tail xs
        result += 1

    return result


def sum xs :: [Int] -> Int =
    if null xs then
        return 0
    else
        return head xs + sum $ tail xs


def product xs :: [Int] -> Int =
    if null xs then
        return 1
    else
        return head xs * product $ tail xs


-- take :: Int -> [a] -> [a]
def take n xs =
    if n == 0 then
        return []
    else
        return head xs : take (n - 1) (tail xs)


-- drop :: Int -> [a] -> [a]
def drop n xs =
    if n == 0 then
        return xs
    else
        return drop (n - 1) (tail xs)


def max a b :: Int -> Int -> Int =
    if a > b then
        return a
    else
        return b


def maximum xs :: [Int] -> Int =
    if length xs == 1 then
        return head xs
    else
        return max (head xs) (maximum $ tail xs)


-- at :: Int -> [a] -> a
def at n xs =
    while n > 0 do
        xs = tail xs
        n -= 1

    return head xs


-- reverse :: [a] -> [a]
def reverse xs =
    ys := []
    for x in xs do
        ys = x : ys

    return ys


-- map :: (a -> b) -> [a] -> [b]
def map f xs =
    result := []
    for x in xs do
        result = f x : result

    return reverse result


-- filter :: (a -> Bool) -> [a] -> [a]
def filter f xs =
    ys := []
    for x in xs do
        if f x then ys = x : ys

    return reverse ys


def even x :: Int -> Bool =
    if x mod 2 == 0 then return True
    else return False


def odd x :: Int -> Bool =
    if x mod 2 == 0 then return False
    else return True


def pow a b :: Int -> Int -> Int =
    r := 1
    while True do
        if b mod 2 == 1 then r *= a
        b /= 2
        if b == 0 then break
        a *= a

    return r


-- Non stack-destroying version
--def concat xs ys :: [Int] -> [Int] -> [Int] =
--    let zs :: [Int] = ys

--    for x in reverse xs do
--        zs = x : zs

--    return zs


---- Strings ----

def show x :: Int -> String =
    if x == 0 then return "0"

    negative := (x < 0)
    if negative then x = 0 - x

    s := []
    while x != 0 do
        digit := x mod 10
        s = (digit + '0') : s
        x = x / 10

    if negative then s = '-' : s

    return s


---- Pairs ----

data Pair a = Pair a a


def fst pair =
    let Pair x _ = pair
    return x


def snd pair =
    let Pair _ x = pair
    return x


def splitAt n xs =
    return Pair (take n xs) (drop n xs)
