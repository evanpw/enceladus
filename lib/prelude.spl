foreign panic(msg: String) -> T

## List ##
data List<T> = Cons(T, List<T>) | Nil

impl List<T>
    def insert(self, x: T) -> List<T>
        return Cons(x, self)


## Iterator trait ##
trait Iterator<T>
    def head(self)-> T
    def tail(self) -> Self
    def empty(self) -> Bool


## Index trait ##
trait Index<S, T>
    def at(self, n: S) -> T


## Eq trait ##
trait Eq
    def eq(self, other: Self) -> Bool
    def ne(self, other: Self) -> Bool

impl Eq for T where T: Num
    def eq(self, other: T) -> Bool
        return self == other

    def ne(self, other: T) -> Bool
        return self != other


## Range ##
struct Range<T: Num>
    start: T
    end: T

def range(start: T, end: T) -> Range<T>
    return Range(start, end)

impl Iterator<T> for Range<T>
    def head(self) -> T
        assert self.start < self.end
        return self.start

    def tail(self) -> Range<T>
        assert self.start < self.end
        return Range(self.start + 1, self.end)

    def empty(self) -> Bool
        return self.start >= self.end

impl Range<T>
    def toList(self) -> [T]
        result := []

        if self.empty()
            return result

        i := self.end - 1
        while i >= self.start
            result = result.insert(i)
            i -= 1

        return result


## String ##
type Char = UInt8
foreign strLength(s: String) -> UInt
foreign strSlice(s: String, pos: UInt, len: UInt) -> String
foreign strAt(s: String, n: UInt) -> Char
foreign strFromList(s: [Char]) -> String
foreign strCat(lhs: String, rhs: String) -> String
foreign strHash(s: String) -> UInt
foreign show(x: Int) -> String
foreign showUInt(x: UInt) -> String

struct StringIterator
    str: String
    offset: UInt

# Method wrappers (methods can't be implemented in C)
impl String
    def length(self) -> UInt
        return strLength(self)

    def slice(self, pos: UInt, len: UInt) -> String
        return strSlice(self, pos, len)

    def iter(self) -> StringIterator
        return StringIterator(self, 0u)

impl Index<UInt, Char> for String
    def at(self, n: UInt) -> UInt8
        return strAt(self, n)

impl Iterator<Char> for StringIterator
    def head(self) -> Char
        return self.str[self.offset]

    def tail(self) -> StringIterator
        assert self.offset < self.str.length()
        return StringIterator(self.str, self.offset + 1u)

    def empty(self) -> Bool
        return self.offset >= self.str.length()

impl Eq for String
    def eq(self, other: String) -> Bool
        n1 := self.length()
        n2 := other.length()

        if n1 != n2
            return False

        for i in range(0, n1)
            if self.at(i) != other.at(i)
                return False

        return True

    def ne(self, other: String) -> Bool
        return not $ self == other


## Array ##
# FOR INTERNAL USE ONLY: Does not initialize the array
foreign unsafeMakeArray(size: UInt) -> Array<T>
foreign unsafeArrayAt(arr: Array<T>, n: UInt) -> T
foreign unsafeArraySet(arr: Array<T>, n: UInt, value: T)
foreign arrayLength(arr: Array<T>) -> UInt

impl Array<T>
    def new() -> Array<T>
        return unsafeMakeArray(0)

    def make(size: UInt, value: T) -> Array<T>
        arr := unsafeMakeArray(size)

        # MUST NOT collect garbage in between allocation and initialization
        # if T is boxed

        i := 0
        while i < size
            unsafeArraySet(arr, i, value)
            i += 1

        return arr

# Method wrappers (methods can't be implemented in C)
impl Index<UInt, T> for Array<T>
    def at(self, n: UInt) -> T
        assert n < arrayLength(self)
        return unsafeArrayAt(self, n)

impl Array<T>
    def set(self, n: UInt, value: T)
        assert n < arrayLength(self)
        unsafeArraySet(self, n, value)

    def length(self) -> UInt
        return arrayLength(self)


## Option ##
data Option<T> = Some(T) | None

impl Option<T>
    def isSome(self) -> Bool
        match self
            Some(_)
                return True
            None
                return False

    def isNone(self) -> Bool
        match self
            Some(_)
                return False
            None
                return True

    def unwrap(self) -> T
        match self
            Some(y)
                return y
            None
                panic $ "Cannot unwrap None"

    def unwrapOr(self, other: T) -> T
        match self
            Some(y)
                return y
            None
                return other

## I/O functions
foreign read() -> Int
foreign readLine() -> Option<String>
foreign print(msg: String)

# HACK: Make sure these constructors exist for the C library to use
neverUsed := Some("Hello")
neverUsed = None


## List ##
impl Iterator<T> for List<T>
    def head(self) -> T
        match self
            Cons(x, _)
                return x
            Nil
                panic $ "Called head on empty list"

    def tail(self) -> [T]
        match self
            Cons(_, rest)
                return rest
            Nil
                panic $ "Called tail on empty list"

    def empty(self) -> Bool
        match self
            Cons(_, _)
                return False
            Nil
                return True

impl Index<UInt, T> for List<T>
    def at(self, n: UInt) -> T
        xs := self

        while n > 0
            xs = xs.tail()
            n -= 1

        return xs.head()

impl List<T>
    def length(self) -> UInt
        result := 0
        xs := self

        while not $ xs.empty()
            xs = xs.tail()
            result += 1

        return result

    def take(self, n: UInt) -> [T]
        if n == 0
            return []
        else
            return self.tail().take(n - 1).insert(self.head())

    def drop(self, n: UInt) -> [T]
        if n == 0
            return self
        else
            return self.tail().drop(n - 1)

    def reverse(self) -> [T]
        ys := []
        for x in self
            ys = ys.insert(x)

        return ys

    def filter(self: [T], f: T -> Bool) -> [T]
        result := []
        for x in self
            if f(x)
                result = result.insert(x)

        return result.reverse()

    def map(self: [T], f: T -> S) -> [S]
        result := []
        for x in self
            result = result.insert(f(x))

        return result.reverse()

impl Eq for [T] where T: Eq
    def eq(self, other: [T]) -> Bool
        if self.empty()
            return other.empty()
        elif other.empty()
            return False

        if self.head() != other.head()
            return False
        else
            return self.tail() == other.tail()

    def ne(self, other: [T]) -> Bool
        return not $ self == other


## Native-language standard library
def drop(x: T)
    pass


def sum(xs: [T]) -> T where T: Num
    result := 0
    for x in xs
        result += x

    return result


def product(xs: [T]) -> T where T: Num
    if xs.empty()
        return 1
    else
        return xs.head() * product(xs.tail())


def max(a: T, b: T) -> T where T: Num
    if a > b
        return a
    else
        return b


def min(a: T, b: T) -> T where T: Num
    if a < b
        return a
    else
        return b


def maximum(xs: [T]) -> T where T: Num
    if xs.length() == 1
        return xs.head()
    else
        return max(xs.head(), maximum(xs.tail()))


def minimum(xs: [T]) -> T where T: Num
    if xs.length() == 1
        return xs.head()
    else
        return min(xs.head(), minimum(xs.tail()))


def even(x: T) -> Bool where T: Num
    if x % 2 == 0
        return True
    else
        return False


def odd(x: T) -> Bool where T: Num
    if x % 2 == 0
        return False
    else
        return True


def pow(a: T, b: UInt) -> T where T: Num
    r := 1
    forever
        if b % 2 == 1
            r *= a

        b /= 2

        if b == 0
            break

        a *= a

    return r


## Pair ##
data Pair<S, T> = Pair(S, T)

impl Pair<S, T>
    def first(self) -> S
        match self
            Pair(x, _) => return x

    def second(self) -> T
        match self
            Pair(_, x) => return x


def splitAt(n: UInt, xs: [T]) -> Pair<[T], [T]>
    return Pair(xs.take(n), xs.drop(n))


## Ord trait ##
data Ordering = Less | Equal | Greater

trait Ord
    def cmp(self, other: Self) -> Ordering

impl Ord for T where T: Num
    def cmp(self, other: T) -> Ordering
        if self < other
            return Less
        elif self > other
            return Greater
        else
            return Equal

impl Ord for [T] where T: Ord
    def cmp(self, other: [T]) -> Ordering
        if self.empty()
            if other.empty()
                return Equal
            else
                return Less
        elif other.empty()
            return Greater
        else
            match self.head().cmp(other.head())
                Less
                    return Less
                Greater
                    return Greater
                Equal
                    return self.tail().cmp(other.tail())

impl Ord for String
    def cmp(self, other: String) -> Ordering
        n1 := self.length()
        n2 := other.length()

        for n in range(0, min(n1, n2) + 1)
            if self.length() <= n
                if other.length() <= n
                    return Equal
                else
                    return Less
            elif other.length() <= n
                return Greater
            else
                if self.at(n) < other.at(n)
                    return Less
                elif self.at(n) > other.at(n)
                    return Greater

        panic $ "Unreachable"


## PartialOrd trait ##
trait PartialOrd
    def lt(self, other: Self) -> Bool
    def le(self, other: Self) -> Bool
    def gt(self, other: Self) -> Bool
    def ge(self, other: Self) -> Bool

impl PartialOrd for T where T: Ord
    def lt(self, other: T) -> Bool
        match self.cmp(other)
            Less
                return True
            Equal
                return False
            Greater
                return False

    def le(self, other: T) -> Bool
        match self.cmp(other)
            Less
                return True
            Equal
                return True
            Greater
                return False

    def gt(self, other: T) -> Bool
        match self.cmp(other)
            Less
                return False
            Equal
                return False
            Greater
                return True

    def ge(self, other: T) -> Bool
        match self.cmp(other)
            Less
                return False
            Equal
                return True
            Greater
                return True


## Add/Sub/Mul/Div traits ##
trait Add
    def add(self, other: Self) -> Self

impl Add for T where T: Num
    def add(self, other: T) -> T
        return self + other

trait Sub
    def sub(self, other: Self) -> Self

impl Sub for T where T: Num
    def sub(self, other: T) -> T
        return self - other

trait Mul
    def mul(self, other: Self) -> Self

impl Mul for T where T: Num
    def mul(self, other: T) -> T
        return self * other

trait Div
    def div(self, other: Self) -> Self

impl Div for T where T: Num
    def div(self, other: T) -> T
        return self / other

trait Rem
    def rem(self, other: Self) -> Self

impl Rem for T where T: Num
    def rem(self: T, other: T) -> T
        return self % other


## Concatenation (abusing the Add trait)
impl Add for String
    def add(self, other: String) -> String
        return strCat(self, other)

impl Add for [T]
    def add(self, other: [T]) -> [T]
        result := other

        for x in self.reverse()
            result = result.insert(x)

        return result


## Hash trait ##
trait Hash
    def hash(self) -> UInt

impl Hash for Int
    def hash(self) -> UInt
        return self as UInt

impl Hash for String
    def hash(self) -> UInt
        return strHash(self)


## Default trait ##
trait Default
    def default() -> Self

impl Default for T where T: Num
    def default() -> T
        return 0

impl Default for [T]
    def default() -> [T]
        return []

impl Default for String
    def default() -> String
        return ""

impl Default for Bool
    def default() -> Bool
        return False


## Miscellaneous
def assertMessage(b: Bool, err: String)
    if not(b)
        panic $ "Assertion failed: " + err
