bits 64
section .text
global initGC, stackBottom, gcAllocate
extern gcCollect, __globalVarTable, try_mymalloc, mymalloc, _die

initGC:
    mov rax, rsp
    mov qword [rel stackBottom], rax
    ret

gcAllocate:
    push rbp
    mov rbp, rsp

    ; Save size in callee-saved register
    mov rbx, rdi

    ; Try to allocate from the free list
    call try_mymalloc
    test rax, rax
    jnz .finish

    ; If not successful, collect garbage
    lea rdi, [rsp + 8]                  ; Top of stack before call to gcAllocate
    mov rsi, qword [rel stackBottom]    ; Bottom of stack at start of main
    mov rdx, rbp                        ; Frame pointer of caller
    mov rcx, __globalVarTable           ; Table of globals generated by compiler
    call gcCollect

    ; Try again, allowing the allocator to request more memory from the OS
    mov rdi, rbx
    call mymalloc
    test rax, rax
    jnz .finish

    ; If all of this fails, the we're out of memory
    mov rdi, outOfMemoryMessage
    call _die

.finish:
    pop rbp
    ret


section .data
stackBottom:        dq 0

; Type String
outOfMemoryMessage:
    dq 4294967296, 1, 0, 0
    db "*** Exception: Out of Memory", 0
