enum BigInt
    BigInt([Int])

    def digits(self) -> [Int]
        let BigInt(xs) := self
        return xs

    def plus(self, rhs: BigInt) -> BigInt
        xs := self.digits()
        ys := rhs.digits()

        carry := 0
        result := []

        x := 0
        y := 0
        while not $ xs.empty() and ys.empty() and carry == 0
            if xs.empty()
                x = 0
            else
                x = xs.head()
                xs = xs.tail()

            if ys.empty()
                y = 0
            else
                y = ys.head()
                ys = ys.tail()

            z := x + y + carry

            result = result.insert(z % 10)
            carry = z / 10

        return BigInt $ result.reverse()

    def timesInt(self, rhs: Int) -> BigInt
        xs := self.digits()

        carry := 0
        result := []

        while not $ xs.empty() and carry == 0
            z := 0
            if xs.empty()
                z = carry
            else
                x := xs.head()
                z = x * rhs + carry
                xs = xs.tail()

            result = result.insert(z % 10)
            carry = z / 10

        return BigInt $ result.reverse()

    def shift(self, n: UInt) -> BigInt
        if n == 0
            return self
        else
            newDigits := self.digits()
            for i in 0 til n
                newDigits = newDigits.insert(0)

            return BigInt(newDigits)

    def times(self, rhs: BigInt) -> BigInt
        ys := rhs.digits()

        result := BigInt([]) # representation of zero

        for n in 0 til ys.length()
            y := ys.at(n)
            z1 := self.timesInt(y)
            z2 := z1.shift(n)

            result = result.plus(z2)

        return result

    def toString(self) -> String
        s := []
        for x in self.digits()
            s = s.insert((x as Char) + '0')

        return String::fromList(s)

def toBigInt(x: Int) -> BigInt
    result := []

    while x != 0
        result = result.insert(x % 10)
        x /= 10

    return BigInt $ result.reverse()

# Computes a^b
def bigPower(a: Int, b: Int) -> BigInt
    bigA := toBigInt(a)
    result := toBigInt(1)

    for i in 0 til b
        result = result.times(bigA)

    return result
