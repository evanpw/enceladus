## TakeWhile ##
struct TakeWhile<I> where I: Iterator<T>
    iterator: I
    predicate: |T| -> Bool

impl Iterator<T> for TakeWhile<I> where I: Iterator<T>
    def next(self) -> Option<T>
        if let Some(x) := self.iterator.next()
            f := self.predicate
            if f(x)
                return Some(x)

        return None


## Filter ##
struct Filter<I> where I: Iterator<T>
    iterator: I
    predicate: |T| -> Bool

impl Iterator<T> for Filter<I> where I: Iterator<T>
    def next(self) -> Option<T>
        f := self.predicate

        while let Some(x) := self.iterator.next()
            if f(x)
                return Some(x)

        return None


## Peekable ##
struct Peekable<S> where S: Iterator<T>
    iterator: S
    current: Option<T>

    def new(iter: S) -> Peekable<S>
        return Peekable(iter, iter.next())

impl Iterator<T> for Peekable<S> where S: Iterator<T>
    def next(self) -> Option<T>
        if let Some(x) := self.current
            self.current = self.iterator.next()
            return Some(x)
        else
            return None

## Map ##
struct Map<I, T> where I: Iterator<S>
    iterator: I
    fn: |S| -> T

impl Iterator<T> for Map<I, T> where I: Iterator<S>
    def next(self) -> Option<T>
        if let Some(x) := self.iterator.next()
            f := self.fn
            return Some $ f(x)
        else
            return None


## Slide ##
struct Slide<I> where I: Iterator<T>
    iterator: I
    window: Vector<T>
    n: UInt

    def new(iter: I, n: UInt) -> Slide<I>
        window := Vector::new()

        for _ in 0 til n
            if let Some(elt) := iter.next()
                window.append(elt)
            else
                break

        return Slide(iter, window, n)

impl Iterator<Vector<T>> for Slide<I> where I: Iterator<T>
    def next(self) -> Option<Vector<T>>
        if self.window.length() == self.n
            result := self.window.clone()

            self.window.remove(0)
            if let Some(elt) := self.iterator.next()
                self.window.append(elt)

            return Some(result)

        return None


## Iterator transforms ##
impl S: Iterator<T>
    def takeWhile(self, pred: |T| -> Bool) -> TakeWhile<S>
        return TakeWhile(self, pred)

    def filter(self, pred: |T| -> Bool) -> Filter<S>
        return Filter(self, pred)

    def peekable(self) -> Peekable<S>
        return Peekable::new(self)

    def map(self, fn: |T| -> U) -> Map<S, U>
        return Map(self, fn)

    def slide(self, n: UInt) -> Slide<S>
        return Slide::new(self, n)

    def fold(self, init: B, f: |B, T| -> B) -> B
        result := init
        for x in self
            result = f(result, x)

        return result


## Arithmetic on iterators ##
impl S where T: Num, S: Iterable<T>
    def sum(self) -> T
        total := 0

        for x in self
            total += x

        return total

    def product(self) -> T
        total := 1

        for x in self
            total *= x

        return total

## Comparisons on iterators ##
# TODO: Make these apply to Iterable, not just Iterator
impl S where T: Ord, S: Iterator<T>
    def max(self) -> Option<T>
        if let Some(best) := self.next()
            for x in self
                if x > best
                    best = x

            return Some(best)
        else
            return None

    def min(self) -> Option<T>
        if let Some(best) := self.next()
            for x in self
                if x < best
                    best = x

            return Some(best)
        else
            return None

## Boolean operators on iterators ##
impl T: Iterable<Bool>
    def all(self) -> Bool
        for x in self
            if not(x)
                return False

        return True

    def any(self) -> Bool
        for x in self
            if x
                return True

        return False
