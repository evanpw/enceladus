Objectives
--
* Not object-oriented
* Compiled to (bad) x86 (Intel-style) assembly language
* Turing-complete
* Only type is integer (equivalent of C's int) - booleans are zero/non-zero
* Only a single file of source code is supported

Syntax
--
* No multi-line comments - #-style line comments only
* Commands are newline-terminated
* Commands: if, then, goto, print, read
* Operators: +, -, *, / (no unary minus)
* Assignment operator: =
* Identifiers consist of letters, numbers, and underscores; must begin with a letter
* First use of a variable declares it; all variables are at global scope
* Variables are always initialized to zero
* Parentheses for grouping
* Integers literals cannot have leading zeros

Statements
--
* A program consists of a sequence of lines, separated by newlines
* A line is either empty, a statement, or a label
* Statements are either: if, goto, print, read, or assignment

Operators
--
* Operator precedence (highest to lowest)
1) * /
2) + -
3) > =
4) not

* Operator associativity:
1) * / (left)
2) + - (left)
3) > == (not associative)
4) not (not associative)



Semantic Analysis
--
* Labels cannot be repeated (Phase 1)
* Labels cannot be used as variables, and vice versa (Phase 1)
* All "goto" targets must be declared somewhere, and must be a label (Phase 2)
* Variables must be created with a read statement or an assignment before use (TODO)

Code Generation
--
* All identifiers and labels in the program are mangled by adding a single leading underscore
* All compiler-generated identifiers and labels start with two leading underscores

Next Steps
--
* Use this as the starting point for the next compiler
- functions and scopes
- syntactic sugar
- more comparisons: !=
- more operators: unary minus, 
- more loops

Lesson learned
---------------
* Better to do the recursion in the visitor pattern in the actual visitor class.
  It's more flexible, in that you can do things in between child nodes.
* Code the AST classes in a unified way so that you can handle nodes with children
  in a consistent way.
  
Ideas
--
* Assignment is a statement, not an expression
* Thus we can use = and == without danger of the if (x = 4) bug from C++

Differences from Python indentation
-----------------------------------
* There is no joining of logical lines within parentheses