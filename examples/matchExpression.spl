# Solves Project Euler #19

import String

data Date = Date(Int, Int, Int, Int)

impl Date
    def year(self: Date) -> Int
        let Date(y, m, d, w) := self in y

    def month(self: Date) -> Int
        let Date(y, m, d, w) := self in m

    def day(self: Date) -> Int
        let Date(y, m, d, w) := self in d

    def dayOfWeek(self: Date) -> Int
        let Date(y, m, d, w) := self in w

    def isLeapYear(self: Date) -> Bool
        let Date(y, m, d, w) := self

        if y mod 4 == 0
            if y mod 100 == 0
                if y mod 400 == 0
                    return True
                else
                    return False
            else
                return True
        else
            return False

    def daysInMonth(self: Date) -> Int
        let Date(y, m, d, w) := self

        nonLeap  := [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        leapYear := [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

        if self.isLeapYear()
            return leapYear.at(m)
        else
            return nonLeap.at(m)

    def increment(self: Date) -> Date
        let Date(y, m, d, w) := self

        w = (w + 1) mod 7

        d += 1
        if d > self.daysInMonth()
            d = 1
            m += 1

            if m > 12
                y += 1
                m = 1

        return Date(y, m, d, w)


current := Date(1900, 1, 1, 1)

dayCount := 0
while current.year() <= 2000
    if current.year() >= 1901 and current.day() == 1 and current.dayOfWeek() == 0
        dayCount += 1

    current = current.increment()

print $ show(dayCount)
