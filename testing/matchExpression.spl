-- Solves Project Euler #19

import String

data Date = Date Int Int Int Int

def year(date: Date) -> Int 
    let Date y m d w = date in y

def month(date: Date) -> Int 
    let Date y m d w = date in m

def day(date: Date) -> Int 
    let Date y m d w = date in d

def dayOfWeek(date: Date) -> Int 
    let Date y m d w = date in w

def isLeapYear(date: Date) -> Bool 
    let Date y m d w = date

    if y mod 4 == 0
        if y mod 100 == 0
            if y mod 400 == 0
                return True
            else
                return False
        else
            return True
    else
        return False

def daysInMonth(date: Date) -> Int 
    let Date y m d w = date

    nonLeap  := [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    leapYear := [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    if isLeapYear date
        return at m leapYear
    else
        return at m nonLeap

def incrementDate(date: Date) -> Date 
    let Date y m d w = date

    y' := y
    m' := m
    w' := w + 1
    d' := d + 1

    if w' > 6: w' = 0

    if d' > daysInMonth date
        d' = 1
        m' = m + 1

        if m' > 12
            y' = y + 1
            m' = 1

    return Date y' m' d' w'

def printDate(date: Date) -> String 
    let Date y m d w = date

    monthNames := ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    dayNames := ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]

    return join "" [at m monthNames, " ", show d, ", ", show y, " (", at w dayNames, ")"]

current := Date 1900 1 1 1

dayCount := 0
while (year current) <= 2000
    if (year current >= 1901) and (day current == 1) and (dayOfWeek current == 0)
        dayCount += 1

    current = incrementDate current

print $ show dayCount
