# Solves Project Euler 12

def countGroups(xs: List<Int>) -> List<Int>
    if xs.empty()
        return Nil

    result := Nil
    last := xs.head()
    count := 1
    xs = xs.tail()

    while not $ xs.empty()
        if xs.head() == last
            count += 1
        else
            result = result.insert(count)
            last = xs.head()
            count = 1

        xs = xs.tail()

    return result.insert(count).reverse()

def factor(n: Int) -> List<Int>
    if n == 1
        return Nil

    factors := Nil
    i := 2

    while n > 1
        while n % i == 0
            factors = factors.insert(i)
            n /= i

        i += 1

    return factors.reverse()

def countDivisors(x: Int) -> Int
    if x == 1
        return 1

    primeCounts := countGroups $ factor(x)
    count := 1

    for n in primeCounts
        count *= (n + 1)

    return count

def firstNumber(m: Int) -> Int
    n := 0
    i := 1
    forever
        n += i

        if countDivisors(n) > m
            return n

        i += 1

println $ show $ firstNumber(500)
