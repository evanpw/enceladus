# Solves Project Euler 12

def countGroups(xs: [Int]) -> [Int]
    if null xs
        return []

    result := []
    last := head xs
    count := 1
    xs = tail xs

    while not $ null xs
        if head xs == last
            count += 1
        else
            result = count :: result
            last = head xs
            count = 1

        xs = tail xs

    return reverse $ count :: result

def factor(n: Int) -> [Int]
    if n == 1
        return []

    factors := []
    i := 2

    while n > 1
        while n mod i == 0
            factors = i :: factors
            n /= i

        i += 1

    return reverse factors

def countDivisors(x: Int) -> Int
    if x == 1
        return 1

    primeCounts := countGroups $ factor x
    count := 1

    for n in primeCounts
        count *= (n + 1)

    return count

def firstNumber(m: Int) -> Int
    n := 0
    i := 1
    forever
        n += i

        if countDivisors n > m
            return n

        i += 1

print $ show $ firstNumber 500
