data MyPair = MyPair Int Int
data Memo = Memo MyPair Int

memo := []
def searchMemo(p: MyPair) -> Int
    let MyPair x y = p

    for m in memo
        let Memo p' count = m
        let MyPair x' y' = p'

        if x == x' and y == y'
            return count

    return -1

def insertMemo(p: MyPair, count: Int) -> Unit
    memo = (Memo p count) :: memo

def countPaths(p: MyPair) -> Int
    let MyPair x y = p

    if x == 20 and y == 20
        return 1

    if x > 20 or y > 20
        return 0

    memoCount := searchMemo p
    if memoCount >= 0
        return memoCount

    count := 0
    count += countPaths $ MyPair (x + 1) y
    count += countPaths $ MyPair x (y + 1)

    # print $ (show x) ++ " " ++ (show y) ++ " -> " ++ (show count)

    insertMemo p count
    return count

print $ show $ countPaths $ MyPair 0 0
