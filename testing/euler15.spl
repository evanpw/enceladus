import HashTable

impl Eq for Pair<Int, Int>
    def eq(self, other: Self) -> Bool
        let Pair(x1, y1) := self
        let Pair(x2, y2) := other

        return x1 == x2 and y1 == y2

    def ne(self, other: Self) -> Bool
        return not $ self == other

impl Hash for Pair<Int, Int>
    def hash(self) -> UInt
        result := 20 * self.first() + self.second()
        return result as UInt

memo := HashTable::new()

def countPaths(p: Pair<Int, Int>) -> Int
    let Pair(x, y) := p

    if x == 20 and y == 20
        return 1

    if x > 20 or y > 20
        return 0

    memoCount := memo.get(p)
    if memoCount.isSome()
        return memoCount.unwrap()

    count := 0
    count += countPaths $ Pair(x + 1, y)
    count += countPaths $ Pair(x, y + 1)

    memo.insert(p, count)
    return count

println $ show $ countPaths $ Pair(0, 0)
