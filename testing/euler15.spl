import HashTable

def hashPair(key: Pair<Int, Int>) -> Int
    return 20 * key.first() + key.second()

def cmpPair(lhs: Pair<Int, Int>, rhs: Pair<Int, Int>) -> Bool
    let Pair(x1, y1) := lhs
    let Pair(x2, y2) := rhs

    return x1 == x2 and y1 == y2

memo := hashTable(hashPair, cmpPair)

def countPaths(p: Pair<Int, Int>) -> Int
    let Pair(x, y) := p

    if x == 20 and y == 20
        return 1

    if x > 20 or y > 20
        return 0

    memoCount := memo.get(p)
    if memoCount.isSome()
        return memoCount.unwrap()

    count := 0
    count += countPaths $ Pair(x + 1, y)
    count += countPaths $ Pair(x, y + 1)

    memo.insert(p, count)
    return count

print $ show $ countPaths $ Pair(0, 0)
