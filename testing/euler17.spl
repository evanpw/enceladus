# Solves Project Euler 17

import String

smallNumbers := ["zero", "one", "two", "three", "four", "five", "six", "seven",
    "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen",
    "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]

multiplesOfTen := ["zero", "ten", "twenty", "thirty", "forty", "fifty",
    "sixty", "seventy", "eighty", "ninety"]

def numInWords(x: Int) -> String
    if x < 20
        return at x smallNumbers
    elif x < 100
        tens := x / 10
        ones := x mod 10

        if ones != 0
            return join "" [at tens multiplesOfTen, at ones smallNumbers]
        else
            return (at tens multiplesOfTen)
    elif x < 1000
        ones := x mod 10
        tens := (x / 10) mod 10
        hundreds := x / 100
        rest := x mod 100

        if rest != 0
            return join "" [at hundreds smallNumbers, "hundred", "and", numInWords rest]
        else
            return join "" [at hundreds smallNumbers, "hundred"]
    elif x == 1000
        return join "" ["one", "thousand"]
    else
        return "unknown"

totalLength := 0
for i = 1 to 1000
    s := numInWords i
    totalLength += strLength s

print $ show totalLength
