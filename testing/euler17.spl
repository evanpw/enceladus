# Solves Project Euler 17

import String

smallNumbers := ["zero", "one", "two", "three", "four", "five", "six", "seven",
    "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen",
    "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]

multiplesOfTen := ["zero", "ten", "twenty", "thirty", "forty", "fifty",
    "sixty", "seventy", "eighty", "ninety"]

def numInWords(x: UInt) -> String
    assert x >= 0

    if x < 20
        return smallNumbers.at(x)
    elif x < 100
        tens := x / 10
        ones := x % 10

        if ones != 0
            return "".join([multiplesOfTen.at(tens), smallNumbers.at(ones)])
        else
            return multiplesOfTen.at(tens)
    elif x < 1000
        ones := x % 10
        tens := (x / 10) % 10
        hundreds := x / 100
        rest := x % 100

        if rest != 0
            return "".join([smallNumbers.at(hundreds), "hundred", "and", numInWords(rest)])
        else
            return "".join([smallNumbers.at(hundreds), "hundred"])
    elif x == 1000
        return "".join(["one", "thousand"])
    else
        return "unknown"

totalLength := 0
for i in range(1, 1001)
    s := numInWords(i)
    totalLength += s.length()

print $ showUInt(totalLength)
