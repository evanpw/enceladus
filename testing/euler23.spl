# Solves Project Euler #23
import List

def divisors(n: Int) -> [Int]
    result := [1]

    i := 2
    while i * i <= n
        if n % i == 0
            if i * i == n
                result = result.insert(i)
            else
                result = result.insert(i).insert(n / i)

        i += 1

    return result

def isAbundant(n: Int) -> Bool
    return sum(divisors(n)) > n

def isSumOfTwo(y: Int, xs: Array<Int>) -> Bool
    i := 0
    j := xs.length() - 1

    while i <= j
        s := xs[i] + xs[j]

        if s == y
            return True
        elif s > y
            j -= 1
        else
            i += 1

    return False

# Find all abundant numbers less than the limit
reversedList := []
for i in range(1, 28124)
    if isAbundant(i)
        reversedList = reversedList.insert(i)


# Convert the list into an array
n := reversedList.length()
abundants := Array::make(n, 0)

for j in range(0, n)
    x := reversedList.head()
    reversedList = reversedList.tail()

    abundants.set(n - j - 1, x)

# Find all numbers in the range which are the sum of two abundants
total := 0
for k in range(1, 28124)
    if not isSumOfTwo(k, abundants)
        total += k

print $ show(total)

