-- Solves Project Euler #23

import List

def divisors (n: Int) -> [Int] 
    result := [1]

    i := 2
    while i * i <= n:
        if n mod i == 0:
            if i * i == n:
                result = i :: result
            else:
                result = i :: (n / i) :: result

        i += 1

    return result

def isAbundant (n: Int) -> Bool 
    (sum $ divisors n) > n

def isSumOfTwo (y: Int, xs: [Int], zs: [Int]) -> Bool 
    while not (null xs or null zs):
        s := (head xs) + (head zs)

        if s == y:
            return True
        else: if s > y:
            zs = tail zs
        else:
            xs = tail xs

    return False

abundants := []
for i in range 1 28123:
    if isAbundant i:
        abundants = i :: abundants

abundants = sort cmpInt abundants
reversed := reverse abundants

total := 0
for j in range 1 28123:
    if not $ isSumOfTwo j abundants reversed:
        total += j

print $ show total
