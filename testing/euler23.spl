-- Solves Project Euler #23

import List

def divisors (n: Int) -> [Int] =
    result := [1]

    i := 2
    while i * i <= n do
        if n mod i == 0 then
            if i * i == n then
                result = i : result
            else
                result = i : (n / i) : result

        i += 1

    return result

def isAbundant (n: Int) -> Bool =
    return (sum $ divisors n) > n

def isSumOfTwo (y: Int, xs: [Int], zs: [Int]) -> Bool =
    while not (null xs or null zs) do
        s := (head xs) + (head zs)

        if s == y then
            return True
        else if s > y then
            zs = tail zs
        else
            xs = tail xs

    return False

abundants := []
for i in range 1 28123 do
    if isAbundant i then
        abundants = i : abundants

abundants = sort cmpInt abundants
reversed := reverse abundants

total := 0
for j in range 1 28123 do
    if not $ isSumOfTwo j abundants reversed then
        total += j

print $ show total
