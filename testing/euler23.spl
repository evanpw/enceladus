# Solves Project Euler #23
import List

def divisors(n: Int) -> [Int]
    result := [1]

    i := 2
    while i * i <= n
        if n mod i == 0
            if i * i == n
                result = i :: result
            else
                result = i :: (n / i) :: result

        i += 1

    return result

def isAbundant(n: Int) -> Bool
    return sum(divisors(n)) > n

def isSumOfTwo(y: Int, xs: Array Int, n: Int) -> Bool
    i := 0
    j := n - 1

    while i <= j
        s := xs.[i] + xs.[j]

        if s == y
            return True
        elif s > y
            j -= 1
        else
            i += 1

    return False

# Find all abundant numbers less than the limit
reversedList := []
for i = 1 to 28123
    if isAbundant(i)
        reversedList = i :: reversedList


# Convert the list into an array
n := length(reversedList)
abundants := makeArray(n, 0)

for j = 0 to n - 1
    x := head(reversedList)
    reversedList = tail(reversedList)

    arraySet(abundants, n - j - 1, x)

# Find all numbers in the range which are the sum of two abundants
total := 0
for k = 1 to 28123
    if not $ isSumOfTwo(k, abundants, n)
        total += k

print $ show(total)

