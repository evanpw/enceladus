# Solves Project Euler #19

import String

struct Date
    year: UInt
    month: UInt
    day: UInt
    dayOfWeek: UInt

impl Date
    def isLeapYear(self: Date) -> Bool
        year := self.year

        if year % 4 == 0
            if year % 100 == 0
                if year % 400 == 0
                    return True
                else
                    return False
            else
                return True
        else
            return False

    def daysInMonth(self: Date) -> UInt
        nonLeap  := [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        leapYear := [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

        if self.isLeapYear()
            return leapYear.at(self.month)
        else
            return nonLeap.at(self.month)

    def increment(self: Date) -> Date
        let Date(y, m, d, w) := self

        d += 1
        w = (w + 1) % 7

        if d > self.daysInMonth()
            d = 1
            m += 1

            if m > 12
                y += 1
                m = 1

        return Date(y, m, d, w)

    def toString(self: Date) -> String
        monthNames := ["", "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"]

        dayNames := ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
            "Friday", "Saturday"]

        return "".join([monthNames.at(self.month), " ", showUInt(self.day), ", ", showUInt(self.year), " (", dayNames.at(self.dayOfWeek), ")"])

current := Date(1900, 1, 1, 1)

dayCount := 0
while current.year <= 2000
    if current.year >= 1901 and current.day == 1 and current.dayOfWeek == 0
        dayCount += 1

    current = current.increment()

print $ show(dayCount)
