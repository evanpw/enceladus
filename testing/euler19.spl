-- Solves Project Euler #19

data Date = Date Int Int Int Int

def year date =
    let Date y m d w = date
    return y

def month date =
    let Date y m d w = date
    return m

def day date =
    let Date y m d w = date
    return d

def dayOfWeek date =
    let Date y m d w = date
    return w

def isLeapYear date =
    let Date y m d w = date

    if y mod 4 == 0 then
        if y mod 100 == 0 then
            if y mod 400 == 0 then
                return True
            else
                return False
        else
            return True

def daysInMonth date =
    let Date y m d w = date

    nonLeap  := [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    leapYear := [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    if isLeapYear date then
        return at m leapYear
    else
        return at m nonLeap

def incrementDate date =
    let Date y m d w = date

    y' := y
    m' := m
    w' := w + 1
    d' := d + 1

    if w' > 6 then w' = 0

    if d' > daysInMonth date then
        d' = 1
        m' = m + 1

        if m' > 12 then
            y' = y + 1
            m' = 1

    return Date y' m' d' w'

def printDate date =
    let Date y m d w = date

    monthNames := ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    dayNames := ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]

    return join "" [at m monthNames, " ", intToString d, ", ", intToString y, " (", at w dayNames, ")"]

current := Date 1900 1 1 1

dayCount := 0
while (year current) <= 2000 do
    if (year current >= 1901) and (day current == 1) and (dayOfWeek current == 0) then
        dayCount += 1

    current = incrementDate current

print dayCount


