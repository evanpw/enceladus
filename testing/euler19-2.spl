-- Solves Project Euler #19

import String

struct Date =
    year: Int
    month: Int
    day: Int
    dayOfWeek: Int

def isLeapYear (date: Date) -> Bool =
    year := date{year}

    if year mod 4 == 0:
        if year mod 100 == 0:
            if year mod 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False

def daysInMonth (date: Date) -> Int =
    nonLeap  := [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    leapYear := [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    if isLeapYear date:
        return at date{month} leapYear
    else:
        return at date{month} nonLeap

def incrementDate (date: Date) -> Date =
    let Date y m d w = date

    d += 1
    w = (w + 1) mod 7

    if d > daysInMonth date:
        d = 1
        m += 1

        if m > 12:
            y += 1
            m = 1

    return Date y m d w

def printDate (date: Date) -> String =
    monthNames := ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    dayNames := ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]

    return join "" [at date{month} monthNames, " ", show date{day}, ", ", show date{year}, " (", at date{dayOfWeek} dayNames, ")"]

current := Date 1900 1 1 1

dayCount := 0
while current{year} <= 2000:
    if (current{year} >= 1901) and (current{day} == 1) and (current{dayOfWeek} == 0):
        dayCount += 1

    current = incrementDate current

print $ show dayCount



