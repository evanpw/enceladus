-- Solves Project Euler #19

struct Date =
    year :: Int
    month :: Int
    day :: Int
    dayOfWeek :: Int

def isLeapYear date :: Date -> Bool =
    year := date{year}

    if year mod 4 == 0 then
        if year mod 100 == 0 then
            if year mod 400 == 0 then
                return True
            else
                return False
        else
            return True

def daysInMonth date :: Date -> Int =
    nonLeap  := [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    leapYear := [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    if isLeapYear date then
        return at date{month} leapYear
    else
        return at date{month} nonLeap

def incrementDate date :: Date -> Date =
    result := Date{}

    result{year} = date{year}
    result{month} = date{month}
    result{day} = date{day} + 1
    result{dayOfWeek} = (date{dayOfWeek} + 1) mod 7

    if result{day} > daysInMonth date then
        result{day} = 1
        result{month} += 1

        if result{month} > 12 then
            result{year} += 1
            result{month} = 1

    return result

def printDate date :: Date -> String =
    monthNames := ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    dayNames := ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]

    return join "" [at date{month} monthNames, " ", intToString date{day}, ", ", intToString date{year}, " (", at date{dayOfWeek} dayNames, ")"]

current := Date{}
current{year} = 1900
current{month} = 1
current{day} = 1
current{dayOfWeek} = 1

dayCount := 0
while current{year} <= 2000 do
    if (current{year} >= 1901) and (current{day} == 1) and (current{dayOfWeek} == 0) then
        dayCount += 1

    current = incrementDate current

print dayCount



