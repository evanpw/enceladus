# Brainfuck interpreter
# see https://en.wikipedia.org/wiki/Brainfuck
import IO

struct State
    memory: Array<UInt8>
    dp: UInt

impl State
    def new(memSize: UInt) -> State
        arr := Array::make(memSize, 0)
        return State(arr, 0)

# IR Instructions
data Instruction = Add(Int) | MovePtr(Int) | Out | In | Loop(Vector<Instruction>) | Clear| Close

impl Instruction
    def toString(self) -> String
        match self
            Add(m)
                return "Add(" + show(m) + ")"
            MovePtr(m)
                return "MovePtr(" + show(m) + ")"
            Out
                return "Out"
            In
                return "In"
            Loop(_)
                return "Loop"
            Clear
                return "Clear"

            Close
                return "Close"

def compileNext(iter: Peekable<I>, depth: Int) -> Option<Instruction> where I: Iterator<Char>
    while let Some(c) := iter.next()
        if c == '+'
            return Some(Add(1))

        elif c == '-'
            return Some(Add(-1))

        elif c == '>'
            return Some(MovePtr(1))

        elif c == '<'
            return Some(MovePtr(-1))

        elif c == '.'
            return Some(Out)

        elif c == ','
            return Some(In)

        elif c == '['
            body := Vector::new()

            while let Some(inst) := compileNext(iter, depth + 1)
                if let Close := inst
                    return Some(Loop(body))
                else
                    body.append(inst)

            panic $ "Unterminated loop"

        elif c == ']'
            if depth == 0
                panic $ "Unbalanced close bracket"
            else
                return Some(Close)

    return None

def compile(program: String) -> Vector<Instruction>
    result := Vector::new()

    iter := program.iter().peekable()

    while let Some(inst) := compileNext(iter, 0)
        result.append(inst)

    return result

def clearLoop(program: Vector<Instruction>) -> Vector<Instruction>
    result := Vector::new()

    for i in 0 til program.length()
        inst := program[i]

        if let Loop(body) := inst
            if body.length() == 1
                if let Add(n) := body[0]
                    assert n == 1 or n == -1
                    result.append(Clear)
                    continue

            result.append(Loop(clearLoop(body)))
        else
            result.append(inst)

    return result


def combineIncrements(program: Vector<Instruction>) -> Vector<Instruction>
    if program.length() == 0
        return program

    result := Vector::new()

    if let Loop(body) := program[0]
        result.append(Loop(combineIncrements(body)))
    else
        result.append(program[0])

    # Combine repeated +, -, <, or > instructions
    for i in 1 til program.length()
        current := program[i]
        last := result[result.length() - 1]

        if let Add(n) := current
            if let Add(m) := last
                result[result.length() - 1] = Add(n + m)
                continue

        if let MovePtr(n) := current
            if let MovePtr(m) := last
                result[result.length() - 1] = MovePtr(n + m)
                continue

        if let Loop(body) := current
            result.append(Loop(combineIncrements(body)))
            continue

        result.append(program[i])

    return result

def executeInst(state: State, inst: Instruction)
    match inst
        Add(n)
            state.memory[state.dp] += n as UInt8

        MovePtr(n)
            newDP := (state.dp as Int) + n
            assert newDP >= 0 and newDP < state.memory.length() as Int
            state.dp = newDP as UInt

        Out
            putchar(state.memory[state.dp] as Char)

        In
            match readChar(stdin)
                Some(c)
                    state.memory[state.dp] = c as UInt8
                None
                    state.memory[state.dp] = -1 as UInt8

        Loop(body)
            while state.memory[state.dp] != 0
                for bodyInst in body
                    executeInst(state, bodyInst)

        Clear
            state.memory[state.dp] = 0

        Close
            panic $ "Close appears in compiled instructions"


def run(program: Vector<Instruction>)
    state := State::new(30000)

    for inst in program
        executeInst(state, inst)


argc := getArgc()
if argc < 2
    panic $ "Must specify path of source file"

fname := getArgv(1)

match openFile(fname, "r")
    Some(file)
        source := readAll(file)
        code := compile(source)
        code = combineIncrements $ clearLoop(code)

        run(code)
        closeFile(file)

    None
        panic $ "File not found: '" + fname + "'"
