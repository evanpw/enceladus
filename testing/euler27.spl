# Solves Project Euler #27

data Quadratic = Quadratic(Int, Int)

def eval(quad: Quadratic, n: Int) -> Int
    let Quadratic(a, b) := quad

    return n * n + a * n + b

def isPrime(x: Int) -> Bool
    if x <= 0
        return False

    i := 2
    while i * i <= x
        if x % i == 0
            return False

        i += 1

    return True

def numberOfPrimes(q: Quadratic) -> Int
    n := 0
    forever
        p := eval(q, n)

        if not isPrime(p)
            break

        n += 1

    return n


best := 0
bestProduct := 0
for a in range(-1000, 1001)
    for b in range(-1000, 1001)
        q := Quadratic(a, b)
        count := numberOfPrimes(q)

        if count > best
            best = count
            bestProduct = a * b

print $ show(bestProduct)
