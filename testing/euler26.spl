-- Solves Project Euler #26

def reciprocal d =
    result := []
    numerator := 1

    while numerator != 0 do
        quotient := numerator / d
        remainder := numerator mod d

        assert $ quotient < 10

        result = quotient : result
        numerator = remainder * 10

    return reverse $ result

def next n d =
    quotient := n / d
    remainder := n mod d

    assert $ quotient < 10

    return remainder * 10

def findIn x xs =
    i := 0
    while not $ null xs do
        if x == head xs then
            return i
        else
            xs = tail xs
            i += 1

    return -1

def periodLength d =
    n := 1

    numerators := []
    while n != 0 do
        n = next n d

        index := findIn n numerators

        if index >= 0 then
            return index + 1

        numerators = n : numerators

    return 0

longest := 0
longestIndex := 1
for d in range 2 999 do
    period := periodLength d

    if period > longest then
        longest = period
        longestIndex = d

print $ show longestIndex
