# Solves Project Euler #26

def reciprocal(d: Int) -> [Int]
    result := []
    numerator := 1

    while numerator != 0
        quotient := numerator / d
        remainder := numerator mod d

        assert quotient < 10

        result = quotient :: result
        numerator = remainder * 10

    return result.reverse()

def next(n: Int, d: Int) -> Int
    quotient := n / d
    remainder := n mod d

    assert quotient < 10

    return remainder * 10

def findIn(x: Int, xs: [Int]) -> Int
    i := 0
    while not xs.empty()
        if x == xs.head()
            return i
        else
            xs = xs.tail()
            i += 1

    return -1

def periodLength(d: Int) -> Int
    n := 1

    numerators := []
    while n != 0
        n = next(n, d)

        index := findIn(n, numerators)

        if index >= 0
            return index + 1

        numerators = n :: numerators

    return 0

longest := 0
longestIndex := 1
for d = 2 to 999
    period := periodLength(d)

    if period > longest
        longest = period
        longestIndex = d

print $ show(longestIndex)
