-- Solves Project Euler #24

def toInt (xs: [Int]) -> Int 
    result := 0
    for x in xs
        result = (result * 10) + x

    return result

def delete (x: Int, xs: [Int]) -> [Int] 
    initial := []
    xs' := xs

    while not $ null xs'
        if head xs' == x
            return (reverse initial) ++ (tail xs')
        else
            initial = (head xs') :: initial

        xs' = tail xs'

    return xs

def permutations (digits: [Int]) -> [[Int]] 
    if length digits == 1
        return [[head digits]]

    result := []
    for digit in digits
        ps := permutations $ delete digit digits
        for p in ps
            result = (digit :: p) :: result

    return reverse $ result

allPermutations := permutations $ range 0 9

print $ show $ toInt $ at 999999 allPermutations
