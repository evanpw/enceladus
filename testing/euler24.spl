# Solves Project Euler #24

def toInt(xs: [Int]) -> Int
    result := 0
    for x in xs
        result = (result * 10) + x

    return result

def delete(x: Int, xs: [Int]) -> [Int]
    initial := []
    xs' := xs

    while not xs'.empty()
        if xs'.head() == x
            return initial.reverse() ++ xs'.tail()
        else
            initial = xs'.head() :: initial

        xs' = xs'.tail()

    return xs

def factorial(n: Int) -> Int
    result := 1
    while n > 1
        result *= n
        n -= 1

    return result

def permutationAt(n: Int, digits: [Int]) -> [Int]
    if digits.length() == 1
        assert n == 0
        return [digits.head()]

    subCount := factorial(digits.length() - 1)

    for digit in digits
        if subCount <= n
            n -= subCount
        else
            subDigits := delete(digit, digits)
            return digit :: permutationAt(n, subDigits)

    panic $ "Unreachable"

print $ show $ toInt $ permutationAt(999999, range(0, 10).toList())
