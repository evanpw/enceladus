# Solves Project Euler #24

def toInt(xs: [Int]) -> Int 
    result := 0
    for x in xs
        result = (result * 10) + x

    return result

def delete(x: Int, xs: [Int]) -> [Int] 
    initial := []
    xs' := xs

    while not $ null xs'
        if head xs' == x
            return (reverse initial) ++ (tail xs')
        else
            initial = (head xs') :: initial

        xs' = tail xs'

    return xs

def permutations(digits: [Int]) -> [[Int]] 
    if length digits == 1
        return [[head digits]]

    result := []
    for digit in digits
        ps := permutations $ delete digit digits
        for p in ps
            result = (digit :: p) :: result

    return reverse $ result

def permutationAt(n: Int, digits: [Int]) -> [Int]
    assert $ length digits != 1

    count := 0
    for digit in digits
        ps := permutations $ delete digit digits
        for p in ps
            if count == n
                return (digit :: p)
            else
                count += 1

    die "Unreachable"

print $ show $ toInt $ permutationAt 999999 (range 0 9)
