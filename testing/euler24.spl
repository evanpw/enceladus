# Solves Project Euler #24

def toInt(xs: [Int]) -> Int
    result := 0
    for x in xs
        result = (result * 10) + x

    return result

def delete(x: Int, xs: [Int]) -> [Int]
    initial := []
    xs' := xs

    while not $ null(xs')
        if head(xs') == x
            return reverse(initial) ++ tail(xs')
        else
            initial = head(xs') :: initial

        xs' = tail(xs')

    return xs

def factorial(n: Int) -> Int
    result := 1
    while n > 1
        result *= n
        n -= 1

    return result

def permutationAt(n: Int, digits: [Int]) -> [Int]
    if length(digits) == 1
        assert(n == 0)
        return [head(digits)]

    subCount := factorial(length(digits) - 1)

    for digit in digits
        if subCount <= n
            n -= subCount
        else
            subDigits := delete(digit, digits)
            return digit :: permutationAt(n, subDigits)

    die("Unreachable")

print $ show $ toInt $ permutationAt(999999, range(0, 9))
