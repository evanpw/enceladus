# Solves Project Euler #24

def toUInt(xs: [UInt]) -> UInt
    result := 0
    for x in xs
        result = (result * 10) + x

    return result

def delete(x: UInt, xs: [UInt]) -> [UInt]
    initial := []
    xs' := xs

    while not xs'.empty()
        if xs'.head() == x
            return initial.reverse() ++ xs'.tail()
        else
            initial = initial.insert(xs'.head())

        xs' = xs'.tail()

    return xs

def factorial(n: UInt) -> UInt
    result := 1
    while n > 1
        result *= n
        n -= 1

    return result

def permutationAt(n: UInt, digits: [UInt]) -> [UInt]
    if digits.length() == 1
        assert n == 0
        return [digits.head()]

    subCount := factorial(digits.length() - 1)

    for digit in digits
        if subCount <= n
            n -= subCount
        else
            subDigits := delete(digit, digits)
            return permutationAt(n, subDigits).insert(digit)

    panic $ "Unreachable"

print $ showUInt $ toUInt $ permutationAt(999999, range(0, 10).toList())
