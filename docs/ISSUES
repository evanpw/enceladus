* Type errors should be more informative

* The distinction between expressions and statements is unnecessary

* Type annotations on function definitions should be optional
  (see optionalAnnotation.spl)

* If/else statements should be allowed to live on one line (see oneLineIf.spl)

* Allow pattern-matching let statement to be an expression by adding an "in"
  clause (see matchExpression.spl)

* Struct members names should be allowed to clash when there is no ambiguity
  Don't try to infer type of structs when accessing a member.
  (see structMemberNames.spl)

* Remove implicit returns, and add a separate semantic-analysis pass that
  makes sure every path through a function has a return statement

* Reuse temporaries that are no longer live.

* Optimization: Remove labels which are never referenced (can eliminate spills
  or enable other optimizations)

* Separate scope containing for-loop induction variable

* Add a real module system

* Use a better representation for the in-memory stack map

* Add syntax for return with no argument

* Combine redundant definitions

* Turn stack locations into outputs of instructions instead of inputs

* In tag elision, determine loop depth and incorporate into heuristic cost

* Types where every value constructor is parameter-less should have isBoxed() == true

* Make the type annotation on the first parameter of a method optional

* Allow the lhs of a function call to be something other than LIDENT

* Make print a statement, so that print show(4) works

* Add syntactic sugar for ranges

* Make not a unary operator rather than a function

* Make let statements, data declarations, and match statements look more like other function calls

* Change "length" to "len"

* Remove readLine from the list of special keywords for syntax highlighting

* Fix NullaryNode: if capitalized, then must be a variable, and if uppercase, must be a nullary value constructor

* Remove single-line for, if, etc?

* Allow for-loop induction variable to be unnamed

* Clarify the difference between a type alias and a newtype (which one does type do?)

* Allow methods to be implemented in C (needed for String methods mostly)
