Todo
----
* Better memory management (in the compiler)
* Ability to ignore the result of a function call
* Make semantic analysis more rigorous
* Ability to import modules
* Fix bug that causes bad line numbers and columns in error messages
* Clean up the documentation
* Handle the case where prelude does not end with a newline
* Support for infix functions
* Make return at least act like a function (useable with $ for example)
* Add more scopes (for loops, etc)
* Allow function declarations and definitions to be separate
* Use a freeing list to avoid recursive deallocations in the reference counting
* Fix all of the const correctness
* Add algebraic data types, and change List and Tree to behave nicely
* Allow polymorphic function definitions
* Add an intermediate representation step between the AST and assembly language
* Allow in-language definitions of parameterized types
* Define equality operators for all types
* Better syntax for pattern matching
* Recursive pattern matching -> Memo (Pair x y) n
* Enhanced pattern matching for lists -> x : xs
* Better I/O capabilities
* Do some type lookups while parsing
* Add mutable, fixed-length arrays
* Replace as many pointer parameters as possible to references
* Add unit tests for all semantic checks
* Allow pattern matching in function declaration
* Merge struct and data types; struct should be syntactic sugar for
  automatically defining accessors. Remove setting of struct parameters.
* Make the syntax in euler2-2 work
* Add a built-in map / dict type
* Tuples
* Fix global variables with apostrophes
* More sophisticated type aliases: type MyPair = Pair Int
* Allow functions definitions to specify arguments with function types
* Allow real closures with variable capture
* Struct type constructors
* Check that programmer-specified type variables (rigid type variables) are not overwritten with concrete types: generate a type error otherwise