Todo
----
* Better memory management (in the compiler)
* Ability to ignore the result of a function call
* Make semantic analysis more rigorous
* Ability to import modules
* Modify visitor pattern to have preVisit and postVisit methods, and do all of
  the traversal code elsewhere, so that implementers don't have to remember to
  do the recursion
* Fix bug that causes bad line numbers and columns in error messages
* Syntactic sugar for lists
* Clean up the documentation
* Add some support for strings (at least when printing)
* Replace C library calls with direct system calls
* Handle the case where prelude does not end with a newline
* Support for infix functions
* Make return at least act like a function (useable with $ for example)
* Add more scopes (for loops, etc)
* Allow function declarations and definitions to be separate
* Use a freeing list to avoid recursive deallocations in the reference counting
* Fix all of the const correctness
* Add algebraic data types, and change List and Tree to behave nicely
* Allow polymorphic function definitions
* Fix null to have type [a] -> Bool (currently used as Tree -> Bool in prelude)
* Add an intermediate representation step between the AST and assembly language
* Allow in-language definitions of parameterized types
* Define equality operators for all types
* Better syntax for pattern matching
* Recursive pattern matching -> Memo (Pair x y) n
* Enhanced pattern matching for lists -> x : xs
* Better I/O capabilities
